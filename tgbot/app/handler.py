from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest

from sqlalchemy import func, update
from sqlalchemy.sql import text
from sqlalchemy.future import select

from datetime import datetime, timedelta, timezone

from dotenv import load_dotenv

import os
import asyncio
import logging
import sys
from logging.handlers import RotatingFileHandler

import app.Keyboards as kb
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton)

from app.Keyboards import get_referral_keyboard
from app.Middleware import TestMiddleware
from app.general import general, add_referral, check_referrals
from app.database.Models import User, async_session_maker
from app.redis_client import init_redis

router = Router()

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
log_file = "admin_logs.log"
log_handler = RotatingFileHandler(log_file, maxBytes=5*1024*1024, backupCount=3)
log_handler.setFormatter(logging.Formatter("%(asctime)s - %(message)s"))

# –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
logging.basicConfig(handlers=[log_handler], level=logging.INFO)

router.message.outer_middleware(TestMiddleware())
ADMIN_ID = (os.getenv("ADMIN_ID"))  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ ID –∑–∞–¥–∞–Ω –≤ .env

class BroadcastState(StatesGroup):
    waiting_for_message = State()

class Reg(StatesGroup):
    name = State()
    number = State()

class Work(StatesGroup):
    process = State()

class APIKeyChange(StatesGroup):
    waiting_for_new_api = State()

@router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot):
    user_id = message.from_user.id
    args = message.text.split()

    async with async_session_maker() as session:
        user = await session.get(User, user_id)

        if user is None:
            user = User(user_id=user_id)
            session.add(user)
            await session.commit()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        if len(args) > 1 and args[1].isdigit():
            inviter_id = int(args[1])
            
            if inviter_id == user_id:
                await message.answer("‚õî –ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
                return
            
            if user.invited_by is not None:
                inviter = await session.get(User, user.invited_by)
                inviter_name = inviter.username if inviter and inviter.username else user.invited_by
                await message.answer(f"‚õî –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª —É {inviter_name}!")
                return
            
            existing_referral = await session.execute(
                text("SELECT 1 FROM referrals WHERE invited_id = :user_id"),
                {"user_id": user_id}
            )
            if existing_referral.scalar():
                await message.answer("‚õî –í—ã —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω—ã –∫–∞–∫ —á–µ–π-—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª!")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            await add_referral(session, inviter_id, user_id, bot)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        referral_count = await check_referrals(session, user_id)

        start_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")]], resize_keyboard=True
        )

        if referral_count >= 2:
            await message.answer(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥', —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", reply_markup=start_keyboard
            )
        else:
            await message.reply(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üòä\n"
                "üéÅ –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å 1-–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–æ–≤\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø, –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 2 –¥—Ä—É–∑–µ–π.\n"
                "–ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ—Å—Ç—å ‚ù§Ô∏è",
                reply_markup=kb.get_referral_keyboard(user_id)
            )

@router.message(F.text == "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")
async def start_dialog(message: Message):
    user_id = message.from_user.id

    async with async_session_maker() as session:
        referral_count = await check_referrals(session, user_id)

        if referral_count < 2:
            await message.answer(
                "‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 2-—Ö –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
                reply_markup=get_referral_keyboard(user_id)
            )
            return

    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ —É—á—ë–±–µ, –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏, –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –∏–ª–∏ —á–µ–º —É–≥–æ–¥–Ω–æ. –Ø –ø–æ–º–æ–≥—É! üòä"
    )

@router.message(Command("admin"))
async def admin_panel(message: Message, bot: Bot):
    user_id = message.from_user.id
    if user_id != int(ADMIN_ID):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await message.answer("üìä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                         "1Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                         "2Ô∏è‚É£ –†–∞—Å—Å—ã–ª–∫–∞\n"
                         "3Ô∏è‚É£ –õ–æ–≥–∏\n"
                         "4Ô∏è‚É£ –°–º–µ–Ω–∏—Ç—å API",
                         reply_markup=kb.admin_keyboard())

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def user_stats(message: Message):
    user_id = message.from_user.id
    if user_id != int(ADMIN_ID):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    #await log_action(message, message.chat.id, "–ó–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ

    redis = await init_redis()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    stats_cache = await redis.get("stats")

    if stats_cache:
        await message.answer(stats_cache)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –Ω–∞–≥—Ä—É–∂–∞–µ–º –ë–î
        return

    async with async_session_maker() as session:
        total_users = await session.scalar(select(func.count(User.user_id)))
        now = datetime.now(timezone.utc)
        active_today = await session.scalar(select(func.count(User.user_id)).where(User.last_activity >= now - timedelta(days=1)))
        active_week = await session.scalar(select(func.count(User.user_id)).where(User.last_activity >= now - timedelta(weeks=1)))
        active_month = await session.scalar(select(func.count(User.user_id)).where(User.last_activity >= now - timedelta(days=30)))
        new_today = await session.scalar(select(func.count(User.user_id)).where(User.created_at >= now - timedelta(days=1)))
        new_week = await session.scalar(select(func.count(User.user_id)).where(User.created_at >= now - timedelta(weeks=1)))
        new_month = await session.scalar(select(func.count(User.user_id)).where(User.created_at >= now - timedelta(days=30)))

        total_users, active_today, active_week, active_month, new_today, new_week, new_month = map(lambda x: x or 0, [total_users, active_today, active_week, active_month, new_today, new_week, new_month])

        text = (
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
            f"üìÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_week}\n"
            f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {active_month}\n\n"
            f"üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today}\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_week}\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {new_month}"
        )

        await redis.setex("stats", 600, text)  # –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)

        await message.answer(text)
@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id != int(ADMIN_ID):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")
    await state.set_state(BroadcastState.waiting_for_message)

@router.message(StateFilter(BroadcastState.waiting_for_message))
async def send_broadcast(message: Message, bot: Bot, state: FSMContext):
    redis = await init_redis()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis

    if await redis.get('broadcast_in_progress'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç (1800 —Å–µ–∫—É–Ω–¥)
        last_update = await redis.get('broadcast_timestamp')
    
        if last_update and (datetime.now().timestamp() - float(last_update)) > 1800:
            await redis.delete('broadcast_in_progress')  # –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å—à–∏–π —Ñ–ª–∞–≥
            await redis.delete('broadcast_timestamp')  # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–∞–π–º—Å—Ç–∞–º–ø
        else:
            await message.answer("‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return

        await redis.set('broadcast_in_progress', '1')
        await redis.set('broadcast_timestamp', datetime.now().timestamp())  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞

    async with async_session_maker() as session:
        users = await session.execute(select(User.user_id))
        users = [user[0] for user in users]

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å
    await redis.set('broadcast_in_progress', '1')

    await message.answer(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—Å–µ–≥–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await state.clear()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(process_broadcast(bot, message, users))

    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥
    await redis.delete('broadcast_in_progress')


async def process_broadcast(bot: Bot, message: Message, users: list):
    sent, blocked = 0, 0

    async def send_message(user_id):
        nonlocal sent, blocked
        try:
            if message.photo:
                await bot.send_photo(user_id, photo=message.photo[-1].file_id, caption=message.caption)
            elif message.video:
                await bot.send_video(user_id, video=message.video.file_id, caption=message.caption)
            else:
                await bot.send_message(user_id, text=message.text)
            sent += 1
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)  # –ñ–¥–µ–º, –µ—Å–ª–∏ Telegram —Ç—Ä–µ–±—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É
            await send_message(user_id)  # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        except Exception:
            blocked += 1

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä—Ç–∏—è–º–∏ –ø–æ 20
    for i in range(0, len(users), 20):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
        tasks = [send_message(user_id) for user_id in users[i:i + 20]]
        await asyncio.gather(*tasks)
        await asyncio.sleep(1)  # –õ–∏–º–∏—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏

    await message.answer(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {blocked}")

@router.message(F.text == "üìú –õ–æ–≥–∏")
async def send_logs(message: Message, bot: Bot):
    user_id = message.from_user.id
    if user_id != int(ADMIN_ID):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    if not os.path.exists(log_file):
        await message.answer("‚õî –õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        return

    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º
        logging.getLogger().removeHandler(log_handler)

        # –°–æ–∑–¥–∞–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞
        document = FSInputFile(log_file)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥-—Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_document(chat_id=user_id, document=document)

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        logging.info("–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ–º
        os.remove(log_file)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await message.answer("‚úÖ –õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤.")
    finally:
        # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è
        logging.getLogger().addHandler(log_handler)

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        with open(log_file, "w"): pass  # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏


@router.message(F.text == "üîë –°–º–µ–Ω–∏—Ç—å API")
async def request_new_api_key(message: Message, state: FSMContext):
    if message.from_user.id != int(ADMIN_ID):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
    
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API-–∫–ª—é—á:")
    await state.set_state(APIKeyChange.waiting_for_new_api)

@router.message(StateFilter(APIKeyChange.waiting_for_new_api))
async def update_api_key(message: Message, state: FSMContext):
    new_api_key = message.text.strip()

    if not new_api_key or len(new_api_key) < 20:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
        return await message.answer("‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API-–∫–ª—é—á! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –ß–∏—Ç–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª .env
    env_file = ".env"
    with open(env_file, "r") as f:
        lines = f.readlines()

    with open(env_file, "w") as f:
        for line in lines:
            if line.startswith("AI_TOKEN="):
                f.write(f"AI_TOKEN='{new_api_key}'\n")
            else:
                f.write(line)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    os.environ["AI_TOKEN"] = new_api_key

    await message.answer("‚úÖ API-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()

@router.message(F.text)
async def handle_message(message: Message, bot: Bot):
    if message.from_user.id == (await bot.me()).id:
        return
    redis = await init_redis()

    user_id = message.from_user.id

    async with async_session_maker() as session:
        user = await session.get(User, user_id)

        if not user:
            await message.answer("‚õîÔ∏è –í–∞—Å –Ω–µ—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö! –í–≤–µ–¥–∏—Ç–µ /start")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ Redis –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        redis_key = f"first_question:{user_id}"
        if not await redis.exists(redis_key):
            # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            await redis.set(redis_key, "asked", ex=86400)  # –ö–ª—é—á –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞
            response = await general(message.text)
            response_text = response.choices[0].message.content if response and response.choices else "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."
            await message.answer(response_text)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        referral_count = await check_referrals(session, user_id)
        if referral_count < 2:
            await message.answer(
                "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 2-—Ö –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
                reply_markup=get_referral_keyboard(user_id)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        response = await general(message.text)
        response_text = response.choices[0].message.content if response and response.choices else "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."
        await message.answer(response_text)

@router.callback_query(F.data == 'dialog')
async def catalog(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–ò—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω')
    await callback.message.answer('–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—Å—ë, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É –º–µ–Ω—è —Å–ø—Ä–æ—Å–∏—Ç—å, –±—É–¥—å —Ç–æ –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —É—á—ë–±–æ–π, –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø–æ–º–æ—á—å —Å –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º —Ä–µ—Ü–µ–ø—Ç–∞, –∏–ª–∏ –ª—é–±–æ–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=kb.menu)

@router.message(Work.process)
async def stop(message: Message):
    await message.answer('–ù–µ —Å–ø–µ—à–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à–µ –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')

@router.message()
async def ai(message: Message, state: FSMContext):
    if message.text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await state.set_state(Work.process)
        res = await general(message.text)
        response_text = res.choices[0].message.content if res and res.choices else "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."
        await message.answer(response_text)
        await state.clear()
    else:
        await message.answer("‚õî –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

