from aiogram import BaseMiddleware, types
from aiogram.types import TelegramObject, Update, CallbackQuery, Message
from typing import Callable, Dict, Any, Awaitable
from app.database.Models import User, async_session_maker
from app.general import check_referrals
from app.Keyboards import get_referral_keyboard
from datetime import datetime, timezone
from dotenv import load_dotenv

from app.database.Models import User
from app.redis_client import init_redis

import logging
import os

load_dotenv()

ADMIN_ID = int(os.getenv("ADMIN_ID"))

#logging.basicConfig(filename="bot_errors.log", level=logging.ERROR, format="%(asctime)s - %(message)s")

class AccessControlMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        if isinstance(event, Message):
            user_id = event.from_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if user_id == ADMIN_ID:
                return await handler(event, data)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞

            async with async_session_maker() as session:
                user = await session.get(User, user_id)

                if not user:
                    await event.answer("üöÄ –í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –í–≤–µ–¥–∏—Ç–µ /start")
                    return

                referral_count = await check_referrals(session, user_id)

                if referral_count < 2:
                    await event.answer(
                        "üöÄ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 2 –¥—Ä—É–∑–µ–π.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                        reply_markup=get_referral_keyboard(user_id)
                    )
                    return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞

        return await handler(event, data)

class ErrorHandlerMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Update, data):
        try:
            return await handler(event, data)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
            await event.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ë–æ—Ç —É–ø–∞–ª! –û—à–∏–±–∫–∞: {e}")

class AntiFloodMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redis."""

    def __init__(self, limit=2):  # –õ–∏–º–∏—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.limit = limit
        super().__init__()

    async def __call__(self, handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]], 
                       event: Message, data: Dict[str, Any]) -> Any:
        user_id = event.from_user.id
        redis = await init_redis()
        key = f"flood_{user_id}"
        last_request = await redis.get(key)

        if last_request:
            await event.answer("‚õî –í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return

        await redis.setex(key, self.limit, "1")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        return await handler(event, data)

class UpdateLastActivityMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data: dict):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ `Message` –∏–ª–∏ `CallbackQuery`
        if isinstance(event, (Message, CallbackQuery)):
            from_user = event.from_user  # –¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ —É —Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å from_user
            
            if from_user and from_user.id:
                async with async_session_maker() as session:
                    user = await session.get(User, from_user.id)

                    if not user:
                        user = User(user_id=from_user.id, last_activity=datetime.now(timezone.utc))
                        session.add(user)
                    else:
                        user.last_activity = datetime.now(timezone.utc)

                    await session.commit()

        return await handler(event, data)

class TestMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        print('–î–µ–π—Å—Ç–≤–∏–µ –¥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞')
        result = await handler(event, data)
        print('–î–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞')
        return result
