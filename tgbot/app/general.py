
from mistralai import Mistral
import os
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.Models import User, Referral
from aiogram import Bot
from aiogram.types import Message
from sqlalchemy import text
import logging

from dotenv import load_dotenv
from app.redis_client import init_redis

load_dotenv()

#logging.basicConfig(filename="admin_logs.log", level=logging.INFO, format="%(asctime)s - %(message)s")

async def add_referral(session: AsyncSession, inviter_id: int, invited_id: int, bot: Bot):
    inviter = await session.get(User, inviter_id)
    invited = await session.get(User, invited_id)

    if not inviter or not invited:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ —á–µ–π-—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª
    if invited.invited_by:
        inviter_user = await session.get(User, invited.invited_by)
        inviter_name = inviter_user.username if inviter_user and inviter_user.username else invited.invited_by
        await bot.send_message(invited_id, f"‚õî –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {inviter_name}!")
        return

    invited.invited_by = inviter_id
    inviter.referral_count += 1
    session.add(Referral(inviter_id=inviter_id, invited_id=invited_id))

    await bot.send_message(invited_id, "‚úÖ –í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª!")
    
    if inviter.referral_count >= 2:
        inviter.access_granted = 1  # –î–∞–µ–º –¥–æ—Å—Ç—É–ø
        await bot.send_message(inviter_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ 2-—Ö –¥—Ä—É–∑–µ–π –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!")
    else:
        await bot.send_message(inviter_id, f"‚úÖ {inviter.referral_count}/2 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã!")

    await session.commit()

async def check_referrals(session: AsyncSession, user_id: int) -> int:
    redis = await init_redis()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    referral_count = await redis.get(f"user:{user_id}:referral_count")
    if referral_count is not None:
        return int(referral_count)
    
    # –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –ë–î
    result = await session.execute(
        text("SELECT COUNT(*) FROM referrals WHERE inviter_id = :user_id"),
        {"user_id": user_id}
    )
    referral_count = result.scalar() or 0

    # –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç
    await redis.setex(f"user:{user_id}:referral_count", 600, referral_count)
    return referral_count


#async def log_action(message: Message, admin_id: int, action: str):
#    logging.info(f"–ê–¥–º–∏–Ω {admin_id}: {action}")

async def general(content):
    s = Mistral(
        api_key=os.getenv('AI_TOKEN'),
    )
    res = await s.chat.complete_async(model="mistral-small-latest", messages=[
        {
            "content": content,
            "role": "user",
        },
    ])
    if res is not None:
        return res